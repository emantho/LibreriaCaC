

>PRIMERA PARTE< 
Contempla la inicialización del venv, ejecución de venv e instalación de django, etc; además crear directorios "templates" y "static". Las configuraciones en settings.py, urls.py y views.py 

>SEGUNDA PARTE<

1rs steps
----------
--Concepto-- 
extra_context = {"comision":"23506"} --> debe llamarse dentro del codigo html usando doble {{}}.
views.py ->> extra_context = {"comision": "23506 🏂"} # Dynamic content insertion using extra_content
html --> <span class="magic-text">Codo a Codo</span><span> Comision {{comision}}



django-admin startapp app_librebria

python3 manage.py makemigrations

python manage.py migrate

Username (leave blank to use 'eder'): librer0
Email address: libreria@mail.com
Password: librer01234

2nd steps
---------
Front-End integration

Must create urls.py (router) and template folder into app_libreria





App creation
- created app_libreria
- created Libro model with the book template
- app_libreria registered in admin.py
- added custom_app.app_libreria
- Inserted line to append it  into installed_apps in setting.py
- Created DB "nuevos_libros"
- Applied makemigrations and migrate
- Created "librer0" superuser
- Two books insertions made in DB from GUI





STEP TO STEP
---------------

1st Part
........ 

Project build up, venv, global project<name> settings, folder creation {static and templates} 


2nd Part
........
App creation, Database connection,  and crud

2.1. App creation

	Note: use any of these commands
	$ python manage.py startapp app_vino
	or
	$ django-admin startapp app_vino

2.1.1 - Create app -->> django-admin startapp app_libreria
	
	This command create a new folder with files inside
	app_libreria
	- Migrations/	->
	- __init__.py	->
	- admin.py	-> Use for model registration
	- apps.py	-> Type of autoincrement use for table
	- models.py 	-> Abstration or estrcuture for the table
	- tests.py	-> Automate test
	- views.py	-> Views to show information

2.1.2 - Models.py
	
	Goto models to create the table structure
	
	from django.db import models
	from django.db.models import Model

	# Create your models here.
	class Libro(models.Model):
    	titulo = models.CharField(max_length=100, null=False, blank=False)
    	autor = models.CharField(max_length=100, null=False, blank=False)
    	editorial = models.CharField(max_length=100, null=False, blank=False)
    	precio = models.IntegerField(max_length=10, null=False, blank=False)
    	fecha_publicacion = models.DateField(max_length=100, null=False, blank=False)
    	isbn = models.CharField(max_length=100, null=False, blank=False, primary_key=True)

    	# podemos crear la tabla con un nombre especifico pero se lo tenemos
    	# que indicar directamente en la metaclase
    
    	class Meta:
        db_table = "Nuevos_ingresos"
    
    	def __str__(self):
        	return f"Titulo: {self.titulo} | Autor: {self.autor} | Editorial: {self.editorial} | ISBN: {self.isbn}"

    	def get_fields(self):
        	return [
            		(field.verbose_name, field.value_from_object(self))
            		for field in self.__class__._meta.fields[1:]
        ]
        
2.1.2 - Admins.py
	Go to registrer the model 
	
	from django.contrib import admin
	from .models import Libro

	# Register your models here.
	@admin.register(Libro)
	class LibroAdmin(admin.ModelAdmin):
        ...

2.1.3 - Insert app configuration into project.settings.py
    
    # Application definition

    CUSTOM_APPS = [
        "app_libreria"
    ]

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    INSTALLED_APPS += CUSTOM_APPS
    
2.2 - Migrate model into Database

2.2.1 - Do Makemigration to prepare changes in Database for the created model 
    python manage.py makemigrations

2.2.2 - Do Migrate to apply the changes into Database
    python manage.py migrate
    # This coommand will create the new table into de Database 

2.2.3 - Create superuser
    python manage.py createsuperuser

    user:    librero
    Email:   libreriacac@mail.com
    passw:   librer01234

2.3 - Connection with frontEnd

2.3.1 - Create (ROUTER) file urls.py into app_libreria

2.3.2 - Create folder templates into app_libreria







titulo	autor	publicacion	isdb
Introducción a la Pasteleria	Diana Pinzon	2018-12-19	asdfkjhq34jknadf98243rt
Jugar y Aprender	Emilia Manjarres Pinzon	2022-12-25	lñjksdfgklnje9o8243